# –§—ë–¥–æ—Ä–æ–≤ –í–ª–∞–¥
from tkinter import ttk, messagebox, filedialog, END, Text
import sqlite3
import shutil
import os
import datetime


class BackupManager:
    def __init__(self, master):
        self.master = master
        master.title("üì¶ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")

        # –ö–Ω–æ–ø–∫–∏
        self.backup_button = ttk.Button(
            master, text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é üíæ", command=self.create_backup
        )
        self.backup_button.pack(pady=10, padx=10, fill='x')

        self.restore_button = ttk.Button(
            master, text="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏ üîÅ", command=self.restore_from_backup
        )
        self.restore_button.pack(pady=10, padx=10, fill='x')

        # –õ–æ–≥
        self.log_text = Text(master, height=15, width=50)
        self.log_text.pack(pady=10, padx=10, fill='both', expand=True)

        self.add_log("üìö –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def create_backup(self):
        original_file = "academyTOP.db"  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ë–î

        if not os.path.exists(original_file):
            self.add_log("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        backup_folder = "backups"
        if not os.path.exists(backup_folder):
            os.makedirs(backup_folder)

        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"academyTOP_backup_{current_time}.db"
        backup_path = os.path.join(backup_folder, backup_name)

        try:
            shutil.copy2(original_file, backup_path)
            self.add_log(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {backup_path}")
        except Exception as e:
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

    def restore_from_backup(self):
        backup_folder = "backups"
        if not os.path.exists(backup_folder):
            self.add_log("‚ùå –ü–∞–ø–∫–∞ backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        selected_file = filedialog.askopenfilename(
            initialdir=backup_folder,
            title="–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø",
            filetypes=[("SQLite DB", "*.db")]
        )
        if not selected_file:
            return

        original_file = "academyTOP.db"

        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            conn = sqlite3.connect(original_file)
            conn.execute("PRAGMA busy_timeout = 3000")
            conn.close()

            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            shutil.copy2(selected_file, original_file)
            self.add_log(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {selected_file}")
            messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {str(e)}")
            self.add_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    def add_log(self, message):
        self.log_text.insert(END, f"{message}\n")
        self.log_text.see(END)
